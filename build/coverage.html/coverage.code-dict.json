{"/home/travis/build/npmtest/node-npmtest-phonegap-plugin-push/test.js":"/* istanbul instrument in package npmtest_phonegap_plugin_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-push/lib.npmtest_phonegap_plugin_push.js":"/* istanbul instrument in package npmtest_phonegap_plugin_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phonegap_plugin_push = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phonegap_plugin_push = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-push/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phonegap-plugin-push && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phonegap_plugin_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phonegap_plugin_push\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phonegap_plugin_push.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phonegap_plugin_push.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phonegap_plugin_push.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phonegap_plugin_push.__dirname + '/lib.npmtest_phonegap_plugin_push.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-push/node_modules/phonegap-plugin-push/www/push.js":"/* global cordova:false */\n/* globals window */\n\n/*!\n * Module dependencies.\n */\n\nvar exec = cordova.require('cordova/exec');\n\n/**\n * PushNotification constructor.\n *\n * @param {Object} options to initiate Push Notifications.\n * @return {PushNotification} instance that can be monitored and cancelled.\n */\n\nvar PushNotification = function(options) {\n    this._handlers = {\n        'registration': [],\n        'notification': [],\n        'error': []\n    };\n\n    // require options parameter\n    if (typeof options === 'undefined') {\n        throw new Error('The options argument is required.');\n    }\n\n    // store the options to this object instance\n    this.options = options;\n\n    // triggered on registration and notification\n    var that = this;\n    var success = function(result) {\n        if (result && typeof result.registrationId !== 'undefined') {\n            that.emit('registration', result);\n        } else if (result && result.additionalData && typeof result.additionalData.actionCallback !== 'undefined') {\n            var executeFuctionOrEmitEventByName = function(callbackName, context, arg) {\n              var namespaces = callbackName.split('.');\n              var func = namespaces.pop();\n              for (var i = 0; i < namespaces.length; i++) {\n                context = context[namespaces[i]];\n              }\n\n              if (typeof context[func] === 'function') {\n                context[func].call(context, arg);\n              } else {\n                that.emit(callbackName, arg);\n              }\n            };\n\n            executeFuctionOrEmitEventByName(result.additionalData.actionCallback, window, result);\n        } else if (result) {\n            that.emit('notification', result);\n        }\n    };\n\n    // triggered on error\n    var fail = function(msg) {\n        var e = (typeof msg === 'string') ? new Error(msg) : msg;\n        that.emit('error', e);\n    };\n\n    // wait at least one process tick to allow event subscriptions\n    setTimeout(function() {\n        exec(success, fail, 'PushNotification', 'init', [options]);\n    }, 10);\n};\n\n/**\n * Unregister from push notifications\n */\n\nPushNotification.prototype.unregister = function(successCallback, errorCallback, options) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.unregister failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.unregister failure: success callback parameter must be a function');\n        return;\n    }\n\n    var that = this;\n    var cleanHandlersAndPassThrough = function() {\n        if (!options) {\n            that._handlers = {\n                'registration': [],\n                'notification': [],\n                'error': []\n            };\n        }\n        successCallback();\n    };\n\n    exec(cleanHandlersAndPassThrough, errorCallback, 'PushNotification', 'unregister', [options]);\n};\n\n/**\n * subscribe to a topic\n * @param   {String}      topic               topic to subscribe\n * @param   {Function}    successCallback     success callback\n * @param   {Function}    errorCallback       error callback\n * @return  {void}\n */\nPushNotification.prototype.subscribe = function(topic, successCallback, errorCallback) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.subscribe failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.subscribe failure: success callback parameter must be a function');\n        return;\n    }\n\n    exec(successCallback, errorCallback, 'PushNotification', 'subscribe', [topic]);\n};\n\n/**\n * unsubscribe to a topic\n * @param   {String}      topic               topic to unsubscribe\n * @param   {Function}    successCallback     success callback\n * @param   {Function}    errorCallback       error callback\n * @return  {void}\n */\nPushNotification.prototype.unsubscribe = function(topic, successCallback, errorCallback) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.unsubscribe failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.unsubscribe failure: success callback parameter must be a function');\n        return;\n    }\n\n    exec(successCallback, errorCallback, 'PushNotification', 'unsubscribe', [topic]);\n};\n\n/**\n * Call this to set the application icon badge\n */\n\nPushNotification.prototype.setApplicationIconBadgeNumber = function(successCallback, errorCallback, badge) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.setApplicationIconBadgeNumber failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.setApplicationIconBadgeNumber failure: success callback parameter must be a function');\n        return;\n    }\n\n    exec(successCallback, errorCallback, 'PushNotification', 'setApplicationIconBadgeNumber', [{badge: badge}]);\n};\n\n/**\n * Get the application icon badge\n */\n\nPushNotification.prototype.getApplicationIconBadgeNumber = function(successCallback, errorCallback) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.getApplicationIconBadgeNumber failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.getApplicationIconBadgeNumber failure: success callback parameter must be a function');\n        return;\n    }\n\n    exec(successCallback, errorCallback, 'PushNotification', 'getApplicationIconBadgeNumber', []);\n};\n\n/**\n * Get the application icon badge\n */\n\nPushNotification.prototype.clearAllNotifications = function(successCallback, errorCallback) {\n    if (!successCallback) { successCallback = function() {}; }\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.clearAllNotifications failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.clearAllNotifications failure: success callback parameter must be a function');\n        return;\n    }\n\n    exec(successCallback, errorCallback, 'PushNotification', 'clearAllNotifications', []);\n};\n\n/**\n * Listen for an event.\n *\n * Any event is supported, but the following are built-in:\n *\n *   - registration\n *   - notification\n *   - error\n *\n * @param {String} eventName to subscribe to.\n * @param {Function} callback triggered on the event.\n */\n\nPushNotification.prototype.on = function(eventName, callback) {\n    if (!this._handlers.hasOwnProperty(eventName)) {\n        this._handlers[eventName] = [];\n    }\n    this._handlers[eventName].push(callback);\n};\n\n/**\n * Remove event listener.\n *\n * @param {String} eventName to match subscription.\n * @param {Function} handle function associated with event.\n */\n\nPushNotification.prototype.off = function (eventName, handle) {\n    if (this._handlers.hasOwnProperty(eventName)) {\n        var handleIndex = this._handlers[eventName].indexOf(handle);\n        if (handleIndex >= 0) {\n            this._handlers[eventName].splice(handleIndex, 1);\n        }\n    }\n};\n\n/**\n * Emit an event.\n *\n * This is intended for internal use only.\n *\n * @param {String} eventName is the event to trigger.\n * @param {*} all arguments are passed to the event listeners.\n *\n * @return {Boolean} is true when the event is triggered otherwise false.\n */\n\nPushNotification.prototype.emit = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var eventName = args.shift();\n\n    if (!this._handlers.hasOwnProperty(eventName)) {\n        return false;\n    }\n\n    for (var i = 0, length = this._handlers[eventName].length; i < length; i++) {\n        var callback = this._handlers[eventName][i];\n        if (typeof callback === 'function') {\n            callback.apply(undefined,args);\n        } else {\n            console.log('event handler: ' + eventName + ' must be a function');\n        }\n    }\n\n    return true;\n};\n\nPushNotification.prototype.finish = function(successCallback, errorCallback, id) {\n    if (!successCallback) { successCallback = function() {}; }\n    if (!errorCallback) { errorCallback = function() {}; }\n    if (!id) { id = 'handler'; }\n\n    if (typeof successCallback !== 'function') {\n        console.log('finish failure: success callback parameter must be a function');\n        return;\n    }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('finish failure: failure parameter not a function');\n        return;\n    }\n\n    exec(successCallback, errorCallback, 'PushNotification', 'finish', [id]);\n};\n\n/*!\n * Push Notification Plugin.\n */\n\nmodule.exports = {\n    /**\n     * Register for Push Notifications.\n     *\n     * This method will instantiate a new copy of the PushNotification object\n     * and start the registration process.\n     *\n     * @param {Object} options\n     * @return {PushNotification} instance\n     */\n\n    init: function(options) {\n        return new PushNotification(options);\n    },\n\n    hasPermission: function(successCallback, errorCallback) {\n        exec(successCallback, errorCallback, 'PushNotification', 'hasPermission', []);\n    },\n\n    /**\n     * PushNotification Object.\n     *\n     * Expose the PushNotification object for direct use\n     * and testing. Typically, you should use the\n     * .init helper method.\n     */\n\n    PushNotification: PushNotification\n};\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-push/node_modules/phonegap-plugin-push/hooks/windows/setToastCapable.js":"module.exports = function(context) {\n    console.log('Updating appxmanifests with ToastCapable=true...');\n    var path = require('path');\n    var platformProjPath = path.join(context.opts.projectRoot, 'platforms/windows');\n    var AppxManifest = require(path.join(platformProjPath, 'cordova/lib/AppxManifest'));\n\n    ['package.phone.appxmanifest', 'package.windows.appxmanifest'].forEach(function(manifestPath) {\n        var manifest = AppxManifest.get(path.join(platformProjPath, manifestPath));\n        manifest.getVisualElements().setToastCapable(true);\n        manifest.write();\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-push/node_modules/phonegap-plugin-push/src/browser/ServiceWorker.js":"var messageChannel;\n\nself.addEventListener('install', function(event) {\n    self.skipWaiting();\n});\n\nself.addEventListener('push', function(event) {\n    // parse incoming message\n    var obj = {};\n    var pushData = {\n        image: 'https://avatars1.githubusercontent.com/u/60365?v=3&s=200',\n        additionalData: {}\n    };\n    if (event.data) {\n        obj = event.data.json();\n    }\n\n    console.log(obj);\n\n    // convert to push plugin API\n    for (var key in obj) {\n        if (key === 'title') {\n            pushData.title = obj[key];\n        } else if (key === 'message' || key === 'body') {\n            pushData.message = obj[key];\n        } else if (key === 'count' || key === 'msgcnt' || key === 'badge') {\n            pushData.count = obj[key];\n        } else if (key === 'sound' || key === 'soundname') {\n            pushData.sound = obj[key];\n        } else if (key === 'image') {\n            pushData.image = obj[key];\n        } else {\n            pushData.additionalData[key] = obj[key];\n        }\n    }\n\n    event.waitUntil(\n        self.registration.showNotification(pushData.title, {\n            body: pushData.message,\n            icon: pushData.image,\n            tag: 'simple-push-demo-notification-tag'\n        })\n    );\n\n    messageChannel.ports[0].postMessage(pushData);\n\n});\n\nself.addEventListener('message', function(event) {\n    messageChannel = event;\n});\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-push/node_modules/phonegap-plugin-push/src/windows/PushPluginProxy.js":"var myApp = {};\nvar pushNotifications = Windows.Networking.PushNotifications;\n\nvar createNotificationJSON = function (e) {\n    var result = { message: '' };       //Added to identify callback as notification type in the API in case where notification has no message\n    var notificationPayload;\n\n    switch (e.notificationType) {\n        case pushNotifications.PushNotificationType.toast:\n        case pushNotifications.PushNotificationType.tile:\n            if (e.notificationType === pushNotifications.PushNotificationType.toast) {\n                notificationPayload = e.toastNotification.content;\n            }\n            else {\n                notificationPayload = e.tileNotification.content;\n            }\n            var texts = notificationPayload.getElementsByTagName(\"text\");\n            if (texts.length > 1) {\n                result.title = texts[0].innerText;\n                result.message = texts[1].innerText;\n            }\n            else if(texts.length === 1) {\n                result.message = texts[0].innerText;\n            }\n            var images = notificationPayload.getElementsByTagName(\"image\");\n            if (images.length > 0) {\n                result.image = images[0].getAttribute(\"src\");\n            }\n            var soundFile = notificationPayload.getElementsByTagName(\"audio\");\n            if (soundFile.length > 0) {\n                result.sound = soundFile[0].getAttribute(\"src\");\n            }\n            break;\n\n        case pushNotifications.PushNotificationType.badge:\n            notificationPayload = e.badgeNotification.content;\n            result.count = notificationPayload.getElementsByTagName(\"badge\")[0].getAttribute(\"value\");\n            break;\n\n        case pushNotifications.PushNotificationType.raw:\n            result.message = e.rawNotification.content;\n            break;\n    }\n\n    result.additionalData = { coldstart: false };         // this gets called only when the app is running\n    result.additionalData.pushNotificationReceivedEventArgs = e;\n    return result;\n}\n\nmodule.exports = {\n    init: function (onSuccess, onFail, args) {\n\n        var onNotificationReceived = function (e) {\n            var result = createNotificationJSON(e);\n            onSuccess(result, { keepCallback: true });\n        }\n\n        try {\n            pushNotifications.PushNotificationChannelManager.createPushNotificationChannelForApplicationAsync().done(\n                function (channel) {\n                    var result = {};\n                    result.registrationId = channel.uri;\n                    myApp.channel = channel;\n                    channel.addEventListener(\"pushnotificationreceived\", onNotificationReceived);\n                    myApp.notificationEvent = onNotificationReceived;\n                    onSuccess(result, { keepCallback: true });\n\n                    var context = cordova.require('cordova/platform').activationContext;\n                    var launchArgs = context ? context.args : null;\n                    if (launchArgs) {         //If present, app launched through push notification\n                        var result = { message: '' };       //Added to identify callback as notification type in the API\n                        result.launchArgs = launchArgs;\n                        result.additionalData = { coldstart: true };\n                        onSuccess(result, { keepCallback: true });\n                    }\n                }, function (error) {\n                    onFail(error);\n                });\n        } catch (ex) {\n            onFail(ex);\n        }\n    },\n    unregister: function (onSuccess, onFail, args) {\n        try {\n            myApp.channel.removeEventListener(\"pushnotificationreceived\", myApp.notificationEvent);\n            myApp.channel.close();\n            onSuccess();\n        } catch(ex) {\n            onFail(ex);\n        }\n    }\n};\nrequire(\"cordova/exec/proxy\").add(\"PushNotification\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-phonegap-plugin-push/node_modules/phonegap-plugin-push/www/browser/push.js":"/* global cordova:false */\n/* globals window, document, navigator */\n\n/*!\n * Module dependencies.\n */\n\nvar exec = cordova.require('cordova/exec');\n\n/**\n * PushNotification constructor.\n *\n * @param {Object} options to initiate Push Notifications.\n * @return {PushNotification} instance that can be monitored and cancelled.\n */\nvar serviceWorker, subscription;\nvar PushNotification = function(options) {\n    this._handlers = {\n        'registration': [],\n        'notification': [],\n        'error': []\n    };\n\n    // require options parameter\n    if (typeof options === 'undefined') {\n        throw new Error('The options argument is required.');\n    }\n\n    // store the options to this object instance\n    this.options = options;\n\n    // subscription options\n    var subOptions = {userVisibleOnly: true};\n    if (this.options.browser.applicationServerKey) {\n        subOptions.applicationServerKey = urlBase64ToUint8Array(this.options.browser.applicationServerKey);\n    }\n\n    // triggered on registration and notification\n    var that = this;\n\n    // Add manifest.json to main HTML file\n    var linkElement = document.createElement('link');\n    linkElement.rel = 'manifest';\n    linkElement.href = 'manifest.json';\n    document.getElementsByTagName('head')[0].appendChild(linkElement);\n\n    if ('serviceWorker' in navigator && 'MessageChannel' in window) {\n        var result;\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            that.emit('notification', event.data);\n        };\n\n        navigator.serviceWorker.register('ServiceWorker.js').then(function() {\n            return navigator.serviceWorker.ready;\n        })\n        .then(function(reg) {\n            serviceWorker = reg;\n            reg.pushManager.subscribe(subOptions).then(function(sub) {\n                subscription = sub;\n                result = { 'registrationId': sub.endpoint.substring(sub.endpoint.lastIndexOf('/') + 1) };\n                that.emit('registration', result);\n\n                // send encryption keys to push server\n                var xmlHttp = new XMLHttpRequest();\n                var xmlURL = (options.browser.pushServiceURL || 'http://push.api.phonegap.com/v1/push') + '/keys';\n                xmlHttp.open('POST', xmlURL, true);\n\n                var formData = new FormData();\n                formData.append('subscription', JSON.stringify(sub));\n\n                xmlHttp.send(formData);\n\n                navigator.serviceWorker.controller.postMessage(result, [channel.port2]);\n            }).catch(function(error) {\n                if (navigator.serviceWorker.controller === null) {\n                    // When you first register a SW, need a page reload to handle network operations\n                    window.location.reload();\n                    return;\n                }\n\n                throw new Error('Error subscribing for Push notifications.');\n            });\n        }).catch(function(error) {\n            console.log(error);\n            throw new Error('Error registering Service Worker');\n        });\n    } else {\n        throw new Error('Service Workers are not supported on your browser.');\n    }\n};\n\n/**\n * Unregister from push notifications\n */\n\nPushNotification.prototype.unregister = function(successCallback, errorCallback, options) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.unregister failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.unregister failure: success callback parameter must be a function');\n        return;\n    }\n\n    var that = this;\n    if (!options) {\n        that._handlers = {\n            'registration': [],\n            'notification': [],\n            'error': []\n        };\n    }\n\n    if (serviceWorker) {\n        serviceWorker.unregister().then(function(isSuccess) {\n            if (isSuccess) {\n                var deviceID = subscription.endpoint.substring(subscription.endpoint.lastIndexOf('/') + 1);\n                var xmlHttp = new XMLHttpRequest();\n                var xmlURL = (that.options.browser.pushServiceURL || 'http://push.api.phonegap.com/v1/push')\n                    + '/keys/' + deviceID;\n                xmlHttp.open('DELETE', xmlURL, true);\n                xmlHttp.send();\n\n                successCallback();\n            } else {\n                errorCallback();\n            }\n        });\n    }\n};\n\n/**\n * subscribe to a topic\n * @param   {String}      topic               topic to subscribe\n * @param   {Function}    successCallback     success callback\n * @param   {Function}    errorCallback       error callback\n * @return  {void}\n */\nPushNotification.prototype.subscribe = function(topic, successCallback, errorCallback) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.subscribe failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.subscribe failure: success callback parameter must be a function');\n        return;\n    }\n\n    successCallback();\n};\n\n/**\n * unsubscribe to a topic\n * @param   {String}      topic               topic to unsubscribe\n * @param   {Function}    successCallback     success callback\n * @param   {Function}    errorCallback       error callback\n * @return  {void}\n */\nPushNotification.prototype.unsubscribe = function(topic, successCallback, errorCallback) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.unsubscribe failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.unsubscribe failure: success callback parameter must be a function');\n        return;\n    }\n\n    successCallback();\n};\n\n/**\n * Call this to set the application icon badge\n */\n\nPushNotification.prototype.setApplicationIconBadgeNumber = function(successCallback, errorCallback, badge) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.setApplicationIconBadgeNumber failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.setApplicationIconBadgeNumber failure: success callback parameter must be a function');\n        return;\n    }\n\n    successCallback();\n};\n\n/**\n * Get the application icon badge\n */\n\nPushNotification.prototype.getApplicationIconBadgeNumber = function(successCallback, errorCallback) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.getApplicationIconBadgeNumber failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.getApplicationIconBadgeNumber failure: success callback parameter must be a function');\n        return;\n    }\n\n    successCallback();\n};\n\n/**\n * Get the application icon badge\n */\n\nPushNotification.prototype.clearAllNotifications = function(successCallback, errorCallback) {\n    if (!errorCallback) { errorCallback = function() {}; }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('PushNotification.clearAllNotifications failure: failure parameter not a function');\n        return;\n    }\n\n    if (typeof successCallback !== 'function') {\n        console.log('PushNotification.clearAllNotifications failure: success callback parameter must be a function');\n        return;\n    }\n\n    successCallback();\n};\n\n/**\n * Listen for an event.\n *\n * The following events are supported:\n *\n *   - registration\n *   - notification\n *   - error\n *\n * @param {String} eventName to subscribe to.\n * @param {Function} callback triggered on the event.\n */\n\nPushNotification.prototype.on = function(eventName, callback) {\n    if (this._handlers.hasOwnProperty(eventName)) {\n        this._handlers[eventName].push(callback);\n    }\n};\n\n/**\n * Remove event listener.\n *\n * @param {String} eventName to match subscription.\n * @param {Function} handle function associated with event.\n */\n\nPushNotification.prototype.off = function (eventName, handle) {\n    if (this._handlers.hasOwnProperty(eventName)) {\n        var handleIndex = this._handlers[eventName].indexOf(handle);\n        if (handleIndex >= 0) {\n            this._handlers[eventName].splice(handleIndex, 1);\n        }\n    }\n};\n\n/**\n * Emit an event.\n *\n * This is intended for internal use only.\n *\n * @param {String} eventName is the event to trigger.\n * @param {*} all arguments are passed to the event listeners.\n *\n * @return {Boolean} is true when the event is triggered otherwise false.\n */\n\nPushNotification.prototype.emit = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var eventName = args.shift();\n\n    if (!this._handlers.hasOwnProperty(eventName)) {\n        return false;\n    }\n\n    for (var i = 0, length = this._handlers[eventName].length; i < length; i++) {\n        var callback = this._handlers[eventName][i];\n        if (typeof callback === 'function') {\n            callback.apply(undefined,args);\n        } else {\n            console.log('event handler: ' + eventName + ' must be a function');\n        }\n    }\n\n    return true;\n};\n\nPushNotification.prototype.finish = function(successCallback, errorCallback, id) {\n    if (!successCallback) { successCallback = function() {}; }\n    if (!errorCallback) { errorCallback = function() {}; }\n    if (!id) { id = 'handler'; }\n\n    if (typeof successCallback !== 'function') {\n        console.log('finish failure: success callback parameter must be a function');\n        return;\n    }\n\n    if (typeof errorCallback !== 'function')  {\n        console.log('finish failure: failure parameter not a function');\n        return;\n    }\n\n    successCallback();\n};\n\n/*!\n * Push Notification Plugin.\n */\n\n/**\n * Converts the server key to an Uint8Array\n *\n * @param base64String\n *\n * @returns {Uint8Array}\n */\nfunction urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/\\-/g, '+')\n        .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (var i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n}\n\n\nmodule.exports = {\n    /**\n     * Register for Push Notifications.\n     *\n     * This method will instantiate a new copy of the PushNotification object\n     * and start the registration process.\n     *\n     * @param {Object} options\n     * @return {PushNotification} instance\n     */\n\n    init: function(options) {\n        return new PushNotification(options);\n    },\n\n    hasPermission: function(successCallback, errorCallback) {\n        successCallback(true);\n    },\n\n    unregister: function(successCallback, errorCallback, options) {\n        PushNotification.unregister(successCallback, errorCallback, options);\n    },\n\n    /**\n     * PushNotification Object.\n     *\n     * Expose the PushNotification object for direct use\n     * and testing. Typically, you should use the\n     * .init helper method.\n     */\n\n    PushNotification: PushNotification\n};\n"}